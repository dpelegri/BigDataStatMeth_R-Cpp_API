% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{bdCrossprod}
\alias{bdCrossprod}
\title{Crossproduct}
\usage{
bdCrossprod(
  A,
  B = NULL,
  transposed = NULL,
  block_size = NULL,
  paral = NULL,
  threads = NULL
)
}
\arguments{
\item{A}{numerical matrix}

\item{B}{optional, numerical matrix}

\item{transposed}{optional parameter. Boolean if true we use the
transposed dataframe to perform calculus. By default transp_dataset = false.}

\item{block_size}{(optional, defalut = NULL) block size to make matrix
multiplication, if \code{block_size = 1} no block size is applied
(size 1 = 1 element per block) if \code{block_size = NULL} (default) optimum
block size is computed}

\item{paral, }{(optional, default = TRUE) if paral = TRUE performs parallel
computation else if paral = FALSE performs serial computation}

\item{threads}{(optional) only if bparal = true, number of concurrent threads
in parallelization if threads is null then threads =  maximum number of
threads available}
}
\value{
numerical matrix with crossproduct
}
\description{
This function performs a crossproduct of a numerical matrix.
}
\examples{

n <- 100
p <- 60

X <- matrix(rnorm(n*p), nrow=n, ncol=p)
res <- bdCrossprod(X)

all.equal(crossprod(X), res)

n <- 100
p <- 100

Y <- matrix(rnorm(n*p), nrow=n)

# With two matrices
res <- bdCrossprod(X,Y)

}
