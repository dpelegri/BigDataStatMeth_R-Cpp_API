% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{bdCholesky_hdf5}
\alias{bdCholesky_hdf5}
\title{Compute Cholesky decomposition with hdf5 data files}
\usage{
bdCholesky_hdf5(
  filename,
  group,
  dataset,
  outdataset,
  outgroup = NULL,
  fullMatrix = NULL,
  overwrite = NULL,
  threads = NULL,
  elementsBlock = 1000000L
)
}
\arguments{
\item{filename}{string specifying the path to the HDF5 file}

\item{group}{string specifying the group within the HDF5 file containing
matrix A.}

\item{dataset}{string, a string specifying the name of the dataset to
perform calculus.}

\item{outdataset}{string (optional), An optional parameter specifying the
dataset name for the output matrix. If NULL, the default name will be
constructed as the name of dataset A concatenated with \emph{x} and the
name of dataset B.}

\item{outgroup}{string (optional), An optional parameger specifying the group
where the output matrix will be stored. If NULL, the output will be stored
in the default group "OUTPUT".}

\item{fullMatrix}{boolean, optional parameter, by default false.
If fullMatrix = true, in the hdf5 file the complete matrix is stored.
If false, only the lower triangular matrix is saved}

\item{overwrite}{logical (optional), An optional parameter to indicate whether
existing results in the HDF5 file should be overwritten. Defaults to FALSE.
If FALSE and the dataset already exists, an error will be displayed, and
no calculations will be performed. If TRUE and a dataset with the same
name as specified in outdataset already exists, it will be overwritten.}

\item{threads}{integer (optional), an optional parameter specifying the
number of threads to use if paral = TRUE. Ignored if paral = FALSE.}

\item{elementsBlock}{integer (optional), an integer that specifies the
maximum number of elements to read from the HDF5 data file in each block.
By default, this value is set to 100,000. If the matrix size exceeds 5000x5000,
the block size is automatically adjusted to number of rows or columns * 2}
}
\value{
Original hdf5 data file with Cholesky decomposition
}
\description{
Compute cholesky decomposition with datasets stored in hdf5 data files. Function returns the upper triangular matrix.
}
\details{
The \strong{Cholesky decomposition} is a factorization of a \strong{symmetric positive-definite matrix} \eqn{A}
into the product of a \strong{lower triangular matrix} \eqn{L} and its transpose.
\deqn{A = L L^\top}
where:
\itemize{
\item \eqn{A} is a symmetric positive-definite matrix of size \eqn{n \times n},
\item \eqn{L} is a lower triangular matrix of size \eqn{n \times n},
\item \eqn{L^\top} is the transpose of \eqn{L}.
}
\subsection{Key Properties}{
\enumerate{
\item \strong{Positive-Definiteness}: The matrix \eqn{A} must be positive-definite
\item \strong{Positive Diagonal}: The diagonal elements of \eqn{L}, \eqn{l_{ii}}, are strictly positive.
}
}
}
\examples{

library(BigDataStatMeth)
library(rhdf5)

set.seed(1234)
    Y <- matrix(sample.int(10, 100, replace = TRUE), ncol = 10)
    
# devtools::reload(pkgload::inst("BigDataStatMeth"))
Ycp <- crossprod(Y)
        
# devtools::reload(pkgload::inst("BigDataStatMeth"))
bdCreate_hdf5_matrix(filename = "test_temp.hdf5", 
                        object = Ycp, group = "data", dataset = "matrix",
                        transp = FALSE,
                        overwriteFile = TRUE, overwriteDataset = TRUE, 
                        unlimited = FALSE)
       
# Get Inverse Cholesky
bdCholesky_hdf5(filename = "test_temp.hdf5", group = "data", 
   dataset = "matrix", outdataset = "matrixDec", outgroup = "Cholesky_Dec", 
   fullMatrix = FALSE, overwrite = TRUE)
       
res <-  h5read("test_temp.hdf5", "Cholesky_Dec/matrixDec")

}
